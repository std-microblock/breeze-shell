// This file is generated by Breeze.JS Bindgen (https://github.com/breeze-shell/breeze-js-bindgen)
// Do not modify this file manually!

#pragma once
#include "binding_types.h"
#include "quickjspp.hpp"

template <typename T>
struct js_bind {
    static void bind(qjs::Context::Module &mod) {}
};

template <> struct qjs::js_traits<mb_shell::js::breeze_ui> {
    static mb_shell::js::breeze_ui unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::breeze_ui obj;

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::breeze_ui &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::breeze_ui> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::breeze_ui>("breeze_ui")
            .constructor<>()
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::breeze_ui::js_widget> {
    static mb_shell::js::breeze_ui::js_widget unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::breeze_ui::js_widget obj;

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::breeze_ui::js_widget &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::breeze_ui::js_widget> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::breeze_ui::js_widget>("breeze_ui::js_widget")
            .constructor<>()
                .property<&mb_shell::js::breeze_ui::js_widget::get_x, &mb_shell::js::breeze_ui::js_widget::set_x>("x")
                .property<&mb_shell::js::breeze_ui::js_widget::get_y, &mb_shell::js::breeze_ui::js_widget::set_y>("y")
                .property<&mb_shell::js::breeze_ui::js_widget::get_width, &mb_shell::js::breeze_ui::js_widget::set_width>("width")
                .property<&mb_shell::js::breeze_ui::js_widget::get_height, &mb_shell::js::breeze_ui::js_widget::set_height>("height")
                .fun<&mb_shell::js::breeze_ui::js_widget::children>("children")
                .fun<&mb_shell::js::breeze_ui::js_widget::append_child>("append_child")
                .fun<&mb_shell::js::breeze_ui::js_widget::prepend_child>("prepend_child")
                .fun<&mb_shell::js::breeze_ui::js_widget::remove_child>("remove_child")
                .fun<&mb_shell::js::breeze_ui::js_widget::append_child_after>("append_child_after")
                .fun<&mb_shell::js::breeze_ui::js_widget::set_animation>("set_animation")
                .fun<&mb_shell::js::breeze_ui::js_widget::get_x>("get_x")
                .fun<&mb_shell::js::breeze_ui::js_widget::set_x>("set_x")
                .fun<&mb_shell::js::breeze_ui::js_widget::get_y>("get_y")
                .fun<&mb_shell::js::breeze_ui::js_widget::set_y>("set_y")
                .fun<&mb_shell::js::breeze_ui::js_widget::get_width>("get_width")
                .fun<&mb_shell::js::breeze_ui::js_widget::set_width>("set_width")
                .fun<&mb_shell::js::breeze_ui::js_widget::get_height>("get_height")
                .fun<&mb_shell::js::breeze_ui::js_widget::set_height>("set_height")
                .fun<&mb_shell::js::breeze_ui::js_widget::downcast>("downcast")
            ;
    }
};

template<> struct js_bind<mb_shell::js::breeze_ui::js_text_widget> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::breeze_ui::js_text_widget>("breeze_ui::js_text_widget")
            .constructor<>()
                .base<mb_shell::js::breeze_ui::js_widget>()
                .property<&mb_shell::js::breeze_ui::js_text_widget::get_text, &mb_shell::js::breeze_ui::js_text_widget::set_text>("text")
                .property<&mb_shell::js::breeze_ui::js_text_widget::get_font_size, &mb_shell::js::breeze_ui::js_text_widget::set_font_size>("font_size")
                .property<&mb_shell::js::breeze_ui::js_text_widget::get_max_width, &mb_shell::js::breeze_ui::js_text_widget::set_max_width>("max_width")
                .property<&mb_shell::js::breeze_ui::js_text_widget::get_color, &mb_shell::js::breeze_ui::js_text_widget::set_color>("color")
                .fun<&mb_shell::js::breeze_ui::js_text_widget::get_text>("get_text")
                .fun<&mb_shell::js::breeze_ui::js_text_widget::set_text>("set_text")
                .fun<&mb_shell::js::breeze_ui::js_text_widget::get_font_size>("get_font_size")
                .fun<&mb_shell::js::breeze_ui::js_text_widget::set_font_size>("set_font_size")
                .fun<&mb_shell::js::breeze_ui::js_text_widget::get_max_width>("get_max_width")
                .fun<&mb_shell::js::breeze_ui::js_text_widget::set_max_width>("set_max_width")
                .fun<&mb_shell::js::breeze_ui::js_text_widget::get_color>("get_color")
                .fun<&mb_shell::js::breeze_ui::js_text_widget::set_color>("set_color")
            ;
    }
};

template<> struct js_bind<mb_shell::js::breeze_ui::js_flex_layout_widget> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::breeze_ui::js_flex_layout_widget>("breeze_ui::js_flex_layout_widget")
            .constructor<>()
                .base<mb_shell::js::breeze_ui::js_widget>()
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_auto_size, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_auto_size>("auto_size")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_horizontal, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_horizontal>("horizontal")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_padding_left, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_padding_left>("padding_left")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_padding_right, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_padding_right>("padding_right")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_padding_top, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_padding_top>("padding_top")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_padding_bottom, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_padding_bottom>("padding_bottom")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_flex_grow, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_flex_grow>("flex_grow")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_max_height, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_max_height>("max_height")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_enable_scrolling, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_enable_scrolling>("enable_scrolling")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_enable_child_clipping, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_enable_child_clipping>("enable_child_clipping")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_crop_overflow, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_crop_overflow>("crop_overflow")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_padding>("padding")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_on_click, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_on_click>("on_click")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_on_mouse_move, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_on_mouse_move>("on_mouse_move")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_on_mouse_enter, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_on_mouse_enter>("on_mouse_enter")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_on_mouse_leave, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_on_mouse_leave>("on_mouse_leave")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_on_mouse_down, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_on_mouse_down>("on_mouse_down")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_on_mouse_up, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_on_mouse_up>("on_mouse_up")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_justify_content, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_justify_content>("justify_content")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_align_items, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_align_items>("align_items")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_background_color, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_background_color>("background_color")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_background_paint, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_background_paint>("background_paint")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_border_paint, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_border_paint>("border_paint")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_border_radius, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_border_radius>("border_radius")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_gap, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_gap>("gap")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_border_color, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_border_color>("border_color")
                .property<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_border_width, &mb_shell::js::breeze_ui::js_flex_layout_widget::set_border_width>("border_width")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_auto_size>("get_auto_size")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_auto_size>("set_auto_size")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_horizontal>("get_horizontal")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_horizontal>("set_horizontal")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_padding_left>("get_padding_left")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_padding_left>("set_padding_left")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_padding_right>("get_padding_right")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_padding_right>("set_padding_right")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_padding_top>("get_padding_top")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_padding_top>("set_padding_top")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_padding_bottom>("get_padding_bottom")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_padding_bottom>("set_padding_bottom")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_flex_grow>("get_flex_grow")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_flex_grow>("set_flex_grow")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_max_height>("get_max_height")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_max_height>("set_max_height")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_enable_scrolling>("get_enable_scrolling")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_enable_scrolling>("set_enable_scrolling")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_enable_child_clipping>("get_enable_child_clipping")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_enable_child_clipping>("set_enable_child_clipping")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_crop_overflow>("get_crop_overflow")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_crop_overflow>("set_crop_overflow")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_padding>("get_padding")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_padding>("set_padding")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_on_click>("get_on_click")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_on_click>("set_on_click")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_on_mouse_move>("get_on_mouse_move")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_on_mouse_move>("set_on_mouse_move")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_on_mouse_enter>("get_on_mouse_enter")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_on_mouse_enter>("set_on_mouse_enter")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_on_mouse_leave>("get_on_mouse_leave")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_on_mouse_leave>("set_on_mouse_leave")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_on_mouse_down>("get_on_mouse_down")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_on_mouse_down>("set_on_mouse_down")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_on_mouse_up>("get_on_mouse_up")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_on_mouse_up>("set_on_mouse_up")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_justify_content>("get_justify_content")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_justify_content>("set_justify_content")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_align_items>("get_align_items")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_align_items>("set_align_items")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_background_color>("set_background_color")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_background_color>("get_background_color")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_background_paint>("get_background_paint")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_background_paint>("set_background_paint")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_border_paint>("get_border_paint")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_border_paint>("set_border_paint")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_border_radius>("get_border_radius")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_border_radius>("set_border_radius")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_gap>("get_gap")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_gap>("set_gap")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_border_color>("set_border_color")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_border_color>("get_border_color")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::get_border_width>("get_border_width")
                .fun<&mb_shell::js::breeze_ui::js_flex_layout_widget::set_border_width>("set_border_width")
            ;
    }
};

template<> struct js_bind<mb_shell::js::breeze_ui::js_image_widget> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::breeze_ui::js_image_widget>("breeze_ui::js_image_widget")
            .constructor<>()
                .base<mb_shell::js::breeze_ui::js_widget>()
                .property<&mb_shell::js::breeze_ui::js_image_widget::get_svg, &mb_shell::js::breeze_ui::js_image_widget::set_svg>("svg")
                .fun<&mb_shell::js::breeze_ui::js_image_widget::get_svg>("get_svg")
                .fun<&mb_shell::js::breeze_ui::js_image_widget::set_svg>("set_svg")
            ;
    }
};

template<> struct js_bind<mb_shell::js::breeze_ui::js_spacer_widget> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::breeze_ui::js_spacer_widget>("breeze_ui::js_spacer_widget")
            .constructor<>()
                .base<mb_shell::js::breeze_ui::js_widget>()
                .property<&mb_shell::js::breeze_ui::js_spacer_widget::get_size, &mb_shell::js::breeze_ui::js_spacer_widget::set_size>("size")
                .fun<&mb_shell::js::breeze_ui::js_spacer_widget::get_size>("get_size")
                .fun<&mb_shell::js::breeze_ui::js_spacer_widget::set_size>("set_size")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::breeze_ui::widgets_factory> {
    static mb_shell::js::breeze_ui::widgets_factory unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::breeze_ui::widgets_factory obj;

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::breeze_ui::widgets_factory &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::breeze_ui::widgets_factory> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::breeze_ui::widgets_factory>("breeze_ui::widgets_factory")
            .constructor<>()
                .static_fun<&mb_shell::js::breeze_ui::widgets_factory::create_text_widget>("create_text_widget")
                .static_fun<&mb_shell::js::breeze_ui::widgets_factory::create_flex_layout_widget>("create_flex_layout_widget")
                .static_fun<&mb_shell::js::breeze_ui::widgets_factory::create_image_widget>("create_image_widget")
                .static_fun<&mb_shell::js::breeze_ui::widgets_factory::create_spacer_widget>("create_spacer_widget")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::breeze_ui::breeze_paint> {
    static mb_shell::js::breeze_ui::breeze_paint unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::breeze_ui::breeze_paint obj;

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::breeze_ui::breeze_paint &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::breeze_ui::breeze_paint> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::breeze_ui::breeze_paint>("breeze_ui::breeze_paint")
            .constructor<>()
                .static_fun<&mb_shell::js::breeze_ui::breeze_paint::from_color>("from_color")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::breeze_ui::window> {
    static mb_shell::js::breeze_ui::window unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::breeze_ui::window obj;

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::breeze_ui::window &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::breeze_ui::window> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::breeze_ui::window>("breeze_ui::window")
            .constructor<>()
                .static_fun<&mb_shell::js::breeze_ui::window::create>("create")
                .static_fun<&mb_shell::js::breeze_ui::window::create_ex>("create_ex")
                .fun<&mb_shell::js::breeze_ui::window::set_root_widget>("set_root_widget")
                .fun<&mb_shell::js::breeze_ui::window::close>("close")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::folder_view_folder_item> {
    static mb_shell::js::folder_view_folder_item unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::folder_view_folder_item obj;

        obj.index = js_traits<int>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "index"));

        obj.parent_path = js_traits<std::string>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "parent_path"));

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::folder_view_folder_item &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        JS_SetPropertyStr(ctx, obj, "index", js_traits<int>::wrap(ctx, val.index));

        JS_SetPropertyStr(ctx, obj, "parent_path", js_traits<std::string>::wrap(ctx, val.parent_path));

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::folder_view_folder_item> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::folder_view_folder_item>("folder_view_folder_item")
            .constructor<>()
                .fun<&mb_shell::js::folder_view_folder_item::name>("name")
                .fun<&mb_shell::js::folder_view_folder_item::modify_date>("modify_date")
                .fun<&mb_shell::js::folder_view_folder_item::path>("path")
                .fun<&mb_shell::js::folder_view_folder_item::size>("size")
                .fun<&mb_shell::js::folder_view_folder_item::type>("type")
                .fun<&mb_shell::js::folder_view_folder_item::select>("select")
                .fun<&mb_shell::js::folder_view_folder_item::index>("index")
                .fun<&mb_shell::js::folder_view_folder_item::parent_path>("parent_path")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::folder_view_controller> {
    static mb_shell::js::folder_view_controller unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::folder_view_controller obj;

        obj.current_path = js_traits<std::string>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "current_path"));

        obj.focused_file_path = js_traits<std::string>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "focused_file_path"));

        obj.selected_files = js_traits<std::vector<std::string>>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "selected_files"));

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::folder_view_controller &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        JS_SetPropertyStr(ctx, obj, "current_path", js_traits<std::string>::wrap(ctx, val.current_path));

        JS_SetPropertyStr(ctx, obj, "focused_file_path", js_traits<std::string>::wrap(ctx, val.focused_file_path));

        JS_SetPropertyStr(ctx, obj, "selected_files", js_traits<std::vector<std::string>>::wrap(ctx, val.selected_files));

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::folder_view_controller> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::folder_view_controller>("folder_view_controller")
            .constructor<>()
                .fun<&mb_shell::js::folder_view_controller::change_folder>("change_folder")
                .fun<&mb_shell::js::folder_view_controller::open_file>("open_file")
                .fun<&mb_shell::js::folder_view_controller::open_folder>("open_folder")
                .fun<&mb_shell::js::folder_view_controller::refresh>("refresh")
                .fun<&mb_shell::js::folder_view_controller::copy>("copy")
                .fun<&mb_shell::js::folder_view_controller::cut>("cut")
                .fun<&mb_shell::js::folder_view_controller::paste>("paste")
                .fun<&mb_shell::js::folder_view_controller::items>("items")
                .fun<&mb_shell::js::folder_view_controller::select>("select")
                .fun<&mb_shell::js::folder_view_controller::select_none>("select_none")
                .fun<&mb_shell::js::folder_view_controller::current_path>("current_path")
                .fun<&mb_shell::js::folder_view_controller::focused_file_path>("focused_file_path")
                .fun<&mb_shell::js::folder_view_controller::selected_files>("selected_files")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::value_reset> {
    static mb_shell::js::value_reset unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::value_reset obj;

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::value_reset &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::value_reset> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::value_reset>("value_reset")
            .constructor<>()
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::window_titlebar_controller> {
    static mb_shell::js::window_titlebar_controller unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::window_titlebar_controller obj;

        obj.is_click_in_titlebar = js_traits<bool>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "is_click_in_titlebar"));

        obj.title = js_traits<std::string>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "title"));

        obj.executable_path = js_traits<std::string>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "executable_path"));

        obj.hwnd = js_traits<int>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "hwnd"));

        obj.x = js_traits<int>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "x"));

        obj.y = js_traits<int>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "y"));

        obj.width = js_traits<int>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "width"));

        obj.height = js_traits<int>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "height"));

        obj.maximized = js_traits<bool>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "maximized"));

        obj.minimized = js_traits<bool>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "minimized"));

        obj.focused = js_traits<bool>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "focused"));

        obj.visible = js_traits<bool>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "visible"));

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::window_titlebar_controller &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        JS_SetPropertyStr(ctx, obj, "is_click_in_titlebar", js_traits<bool>::wrap(ctx, val.is_click_in_titlebar));

        JS_SetPropertyStr(ctx, obj, "title", js_traits<std::string>::wrap(ctx, val.title));

        JS_SetPropertyStr(ctx, obj, "executable_path", js_traits<std::string>::wrap(ctx, val.executable_path));

        JS_SetPropertyStr(ctx, obj, "hwnd", js_traits<int>::wrap(ctx, val.hwnd));

        JS_SetPropertyStr(ctx, obj, "x", js_traits<int>::wrap(ctx, val.x));

        JS_SetPropertyStr(ctx, obj, "y", js_traits<int>::wrap(ctx, val.y));

        JS_SetPropertyStr(ctx, obj, "width", js_traits<int>::wrap(ctx, val.width));

        JS_SetPropertyStr(ctx, obj, "height", js_traits<int>::wrap(ctx, val.height));

        JS_SetPropertyStr(ctx, obj, "maximized", js_traits<bool>::wrap(ctx, val.maximized));

        JS_SetPropertyStr(ctx, obj, "minimized", js_traits<bool>::wrap(ctx, val.minimized));

        JS_SetPropertyStr(ctx, obj, "focused", js_traits<bool>::wrap(ctx, val.focused));

        JS_SetPropertyStr(ctx, obj, "visible", js_traits<bool>::wrap(ctx, val.visible));

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::window_titlebar_controller> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::window_titlebar_controller>("window_titlebar_controller")
            .constructor<>()
                .fun<&mb_shell::js::window_titlebar_controller::set_title>("set_title")
                .fun<&mb_shell::js::window_titlebar_controller::set_icon>("set_icon")
                .fun<&mb_shell::js::window_titlebar_controller::set_position>("set_position")
                .fun<&mb_shell::js::window_titlebar_controller::set_size>("set_size")
                .fun<&mb_shell::js::window_titlebar_controller::maximize>("maximize")
                .fun<&mb_shell::js::window_titlebar_controller::minimize>("minimize")
                .fun<&mb_shell::js::window_titlebar_controller::restore>("restore")
                .fun<&mb_shell::js::window_titlebar_controller::close>("close")
                .fun<&mb_shell::js::window_titlebar_controller::focus>("focus")
                .fun<&mb_shell::js::window_titlebar_controller::show>("show")
                .fun<&mb_shell::js::window_titlebar_controller::hide>("hide")
                .fun<&mb_shell::js::window_titlebar_controller::is_click_in_titlebar>("is_click_in_titlebar")
                .fun<&mb_shell::js::window_titlebar_controller::title>("title")
                .fun<&mb_shell::js::window_titlebar_controller::executable_path>("executable_path")
                .fun<&mb_shell::js::window_titlebar_controller::hwnd>("hwnd")
                .fun<&mb_shell::js::window_titlebar_controller::x>("x")
                .fun<&mb_shell::js::window_titlebar_controller::y>("y")
                .fun<&mb_shell::js::window_titlebar_controller::width>("width")
                .fun<&mb_shell::js::window_titlebar_controller::height>("height")
                .fun<&mb_shell::js::window_titlebar_controller::maximized>("maximized")
                .fun<&mb_shell::js::window_titlebar_controller::minimized>("minimized")
                .fun<&mb_shell::js::window_titlebar_controller::focused>("focused")
                .fun<&mb_shell::js::window_titlebar_controller::visible>("visible")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::input_box_controller> {
    static mb_shell::js::input_box_controller unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::input_box_controller obj;

        obj.text = js_traits<std::string>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "text"));

        obj.placeholder = js_traits<std::string>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "placeholder"));

        obj.multiline = js_traits<bool>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "multiline"));

        obj.password = js_traits<bool>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "password"));

        obj.readonly = js_traits<bool>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "readonly"));

        obj.disabled = js_traits<bool>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "disabled"));

        obj.x = js_traits<int>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "x"));

        obj.y = js_traits<int>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "y"));

        obj.width = js_traits<int>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "width"));

        obj.height = js_traits<int>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "height"));

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::input_box_controller &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        JS_SetPropertyStr(ctx, obj, "text", js_traits<std::string>::wrap(ctx, val.text));

        JS_SetPropertyStr(ctx, obj, "placeholder", js_traits<std::string>::wrap(ctx, val.placeholder));

        JS_SetPropertyStr(ctx, obj, "multiline", js_traits<bool>::wrap(ctx, val.multiline));

        JS_SetPropertyStr(ctx, obj, "password", js_traits<bool>::wrap(ctx, val.password));

        JS_SetPropertyStr(ctx, obj, "readonly", js_traits<bool>::wrap(ctx, val.readonly));

        JS_SetPropertyStr(ctx, obj, "disabled", js_traits<bool>::wrap(ctx, val.disabled));

        JS_SetPropertyStr(ctx, obj, "x", js_traits<int>::wrap(ctx, val.x));

        JS_SetPropertyStr(ctx, obj, "y", js_traits<int>::wrap(ctx, val.y));

        JS_SetPropertyStr(ctx, obj, "width", js_traits<int>::wrap(ctx, val.width));

        JS_SetPropertyStr(ctx, obj, "height", js_traits<int>::wrap(ctx, val.height));

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::input_box_controller> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::input_box_controller>("input_box_controller")
            .constructor<>()
                .fun<&mb_shell::js::input_box_controller::set_text>("set_text")
                .fun<&mb_shell::js::input_box_controller::set_placeholder>("set_placeholder")
                .fun<&mb_shell::js::input_box_controller::set_position>("set_position")
                .fun<&mb_shell::js::input_box_controller::set_size>("set_size")
                .fun<&mb_shell::js::input_box_controller::set_multiline>("set_multiline")
                .fun<&mb_shell::js::input_box_controller::set_password>("set_password")
                .fun<&mb_shell::js::input_box_controller::set_readonly>("set_readonly")
                .fun<&mb_shell::js::input_box_controller::set_disabled>("set_disabled")
                .fun<&mb_shell::js::input_box_controller::focus>("focus")
                .fun<&mb_shell::js::input_box_controller::blur>("blur")
                .fun<&mb_shell::js::input_box_controller::select_all>("select_all")
                .fun<&mb_shell::js::input_box_controller::select_range>("select_range")
                .fun<&mb_shell::js::input_box_controller::set_selection>("set_selection")
                .fun<&mb_shell::js::input_box_controller::insert_text>("insert_text")
                .fun<&mb_shell::js::input_box_controller::delete_text>("delete_text")
                .fun<&mb_shell::js::input_box_controller::clear>("clear")
                .fun<&mb_shell::js::input_box_controller::text>("text")
                .fun<&mb_shell::js::input_box_controller::placeholder>("placeholder")
                .fun<&mb_shell::js::input_box_controller::multiline>("multiline")
                .fun<&mb_shell::js::input_box_controller::password>("password")
                .fun<&mb_shell::js::input_box_controller::readonly>("readonly")
                .fun<&mb_shell::js::input_box_controller::disabled>("disabled")
                .fun<&mb_shell::js::input_box_controller::x>("x")
                .fun<&mb_shell::js::input_box_controller::y>("y")
                .fun<&mb_shell::js::input_box_controller::width>("width")
                .fun<&mb_shell::js::input_box_controller::height>("height")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::js_menu_action_event_data> {
    static mb_shell::js::js_menu_action_event_data unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::js_menu_action_event_data obj;

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::js_menu_action_event_data &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::js_menu_action_event_data> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::js_menu_action_event_data>("js_menu_action_event_data")
            .constructor<>()
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::js_menu_data> {
    static mb_shell::js::js_menu_data unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::js_menu_data obj;

        obj.type = js_traits<std::optional<std::string>>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "type"));

        obj.name = js_traits<std::optional<std::string>>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "name"));

        obj.submenu = js_traits<std::optional<std::variant<std::function<void(std::shared_ptr<mb_shell::js::menu_controller>)>, std::shared_ptr<mb_shell::js::value_reset>>>>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "submenu"));

        obj.action = js_traits<std::optional<std::variant<std::function<void(mb_shell::js::js_menu_action_event_data)>, std::shared_ptr<mb_shell::js::value_reset>>>>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "action"));

        obj.icon_svg = js_traits<std::optional<std::variant<std::string, std::shared_ptr<mb_shell::js::value_reset>>>>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "icon_svg"));

        obj.icon_bitmap = js_traits<std::optional<std::variant<size_t, std::shared_ptr<mb_shell::js::value_reset>>>>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "icon_bitmap"));

        obj.disabled = js_traits<std::optional<bool>>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "disabled"));

        obj.wID = js_traits<std::optional<int64_t>>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "wID"));

        obj.name_resid = js_traits<std::optional<std::string>>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "name_resid"));

        obj.origin_name = js_traits<std::optional<std::string>>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "origin_name"));

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::js_menu_data &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        JS_SetPropertyStr(ctx, obj, "type", js_traits<std::optional<std::string>>::wrap(ctx, val.type));

        JS_SetPropertyStr(ctx, obj, "name", js_traits<std::optional<std::string>>::wrap(ctx, val.name));

        JS_SetPropertyStr(ctx, obj, "submenu", js_traits<std::optional<std::variant<std::function<void(std::shared_ptr<mb_shell::js::menu_controller>)>, std::shared_ptr<mb_shell::js::value_reset>>>>::wrap(ctx, val.submenu));

        JS_SetPropertyStr(ctx, obj, "action", js_traits<std::optional<std::variant<std::function<void(mb_shell::js::js_menu_action_event_data)>, std::shared_ptr<mb_shell::js::value_reset>>>>::wrap(ctx, val.action));

        JS_SetPropertyStr(ctx, obj, "icon_svg", js_traits<std::optional<std::variant<std::string, std::shared_ptr<mb_shell::js::value_reset>>>>::wrap(ctx, val.icon_svg));

        JS_SetPropertyStr(ctx, obj, "icon_bitmap", js_traits<std::optional<std::variant<size_t, std::shared_ptr<mb_shell::js::value_reset>>>>::wrap(ctx, val.icon_bitmap));

        JS_SetPropertyStr(ctx, obj, "disabled", js_traits<std::optional<bool>>::wrap(ctx, val.disabled));

        JS_SetPropertyStr(ctx, obj, "wID", js_traits<std::optional<int64_t>>::wrap(ctx, val.wID));

        JS_SetPropertyStr(ctx, obj, "name_resid", js_traits<std::optional<std::string>>::wrap(ctx, val.name_resid));

        JS_SetPropertyStr(ctx, obj, "origin_name", js_traits<std::optional<std::string>>::wrap(ctx, val.origin_name));

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::js_menu_data> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::js_menu_data>("js_menu_data")
            .constructor<>()
                .fun<&mb_shell::js::js_menu_data::type>("type")
                .fun<&mb_shell::js::js_menu_data::name>("name")
                .fun<&mb_shell::js::js_menu_data::submenu>("submenu")
                .fun<&mb_shell::js::js_menu_data::action>("action")
                .fun<&mb_shell::js::js_menu_data::icon_svg>("icon_svg")
                .fun<&mb_shell::js::js_menu_data::icon_bitmap>("icon_bitmap")
                .fun<&mb_shell::js::js_menu_data::disabled>("disabled")
                .fun<&mb_shell::js::js_menu_data::wID>("wID")
                .fun<&mb_shell::js::js_menu_data::name_resid>("name_resid")
                .fun<&mb_shell::js::js_menu_data::origin_name>("origin_name")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::menu_item_controller> {
    static mb_shell::js::menu_item_controller unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::menu_item_controller obj;

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::menu_item_controller &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::menu_item_controller> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::menu_item_controller>("menu_item_controller")
            .constructor<>()
                .fun<&mb_shell::js::menu_item_controller::set_position>("set_position")
                .fun<&mb_shell::js::menu_item_controller::set_data>("set_data")
                .fun<&mb_shell::js::menu_item_controller::data>("data")
                .fun<&mb_shell::js::menu_item_controller::remove>("remove")
                .fun<&mb_shell::js::menu_item_controller::valid>("valid")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::menu_item_parent_item_controller> {
    static mb_shell::js::menu_item_parent_item_controller unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::menu_item_parent_item_controller obj;

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::menu_item_parent_item_controller &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::menu_item_parent_item_controller> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::menu_item_parent_item_controller>("menu_item_parent_item_controller")
            .constructor<>()
                .fun<&mb_shell::js::menu_item_parent_item_controller::children>("children")
                .fun<&mb_shell::js::menu_item_parent_item_controller::set_position>("set_position")
                .fun<&mb_shell::js::menu_item_parent_item_controller::remove>("remove")
                .fun<&mb_shell::js::menu_item_parent_item_controller::valid>("valid")
                .fun<&mb_shell::js::menu_item_parent_item_controller::append_child_after>("append_child_after")
                .fun<&mb_shell::js::menu_item_parent_item_controller::append_child>("append_child")
                .fun<&mb_shell::js::menu_item_parent_item_controller::prepend_child>("prepend_child")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::window_prop_data> {
    static mb_shell::js::window_prop_data unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::window_prop_data obj;

        obj.key = js_traits<std::string>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "key"));

        obj.value = js_traits<std::variant<size_t, std::string>>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "value"));

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::window_prop_data &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        JS_SetPropertyStr(ctx, obj, "key", js_traits<std::string>::wrap(ctx, val.key));

        JS_SetPropertyStr(ctx, obj, "value", js_traits<std::variant<size_t, std::string>>::wrap(ctx, val.value));

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::window_prop_data> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::window_prop_data>("window_prop_data")
            .constructor<>()
                .fun<&mb_shell::js::window_prop_data::key>("key")
                .fun<&mb_shell::js::window_prop_data::value>("value")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::caller_window_data> {
    static mb_shell::js::caller_window_data unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::caller_window_data obj;

        obj.props = js_traits<std::vector<mb_shell::js::window_prop_data>>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "props"));

        obj.x = js_traits<int>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "x"));

        obj.y = js_traits<int>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "y"));

        obj.width = js_traits<int>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "width"));

        obj.height = js_traits<int>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "height"));

        obj.maximized = js_traits<bool>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "maximized"));

        obj.minimized = js_traits<bool>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "minimized"));

        obj.focused = js_traits<bool>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "focused"));

        obj.visible = js_traits<bool>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "visible"));

        obj.executable_path = js_traits<std::string>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "executable_path"));

        obj.title = js_traits<std::string>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "title"));

        obj.class_name = js_traits<std::string>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "class_name"));

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::caller_window_data &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        JS_SetPropertyStr(ctx, obj, "props", js_traits<std::vector<mb_shell::js::window_prop_data>>::wrap(ctx, val.props));

        JS_SetPropertyStr(ctx, obj, "x", js_traits<int>::wrap(ctx, val.x));

        JS_SetPropertyStr(ctx, obj, "y", js_traits<int>::wrap(ctx, val.y));

        JS_SetPropertyStr(ctx, obj, "width", js_traits<int>::wrap(ctx, val.width));

        JS_SetPropertyStr(ctx, obj, "height", js_traits<int>::wrap(ctx, val.height));

        JS_SetPropertyStr(ctx, obj, "maximized", js_traits<bool>::wrap(ctx, val.maximized));

        JS_SetPropertyStr(ctx, obj, "minimized", js_traits<bool>::wrap(ctx, val.minimized));

        JS_SetPropertyStr(ctx, obj, "focused", js_traits<bool>::wrap(ctx, val.focused));

        JS_SetPropertyStr(ctx, obj, "visible", js_traits<bool>::wrap(ctx, val.visible));

        JS_SetPropertyStr(ctx, obj, "executable_path", js_traits<std::string>::wrap(ctx, val.executable_path));

        JS_SetPropertyStr(ctx, obj, "title", js_traits<std::string>::wrap(ctx, val.title));

        JS_SetPropertyStr(ctx, obj, "class_name", js_traits<std::string>::wrap(ctx, val.class_name));

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::caller_window_data> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::caller_window_data>("caller_window_data")
            .constructor<>()
                .fun<&mb_shell::js::caller_window_data::props>("props")
                .fun<&mb_shell::js::caller_window_data::x>("x")
                .fun<&mb_shell::js::caller_window_data::y>("y")
                .fun<&mb_shell::js::caller_window_data::width>("width")
                .fun<&mb_shell::js::caller_window_data::height>("height")
                .fun<&mb_shell::js::caller_window_data::maximized>("maximized")
                .fun<&mb_shell::js::caller_window_data::minimized>("minimized")
                .fun<&mb_shell::js::caller_window_data::focused>("focused")
                .fun<&mb_shell::js::caller_window_data::visible>("visible")
                .fun<&mb_shell::js::caller_window_data::executable_path>("executable_path")
                .fun<&mb_shell::js::caller_window_data::title>("title")
                .fun<&mb_shell::js::caller_window_data::class_name>("class_name")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::js_menu_context> {
    static mb_shell::js::js_menu_context unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::js_menu_context obj;

        obj.folder_view = js_traits<std::optional<std::shared_ptr<mb_shell::js::folder_view_controller>>>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "folder_view"));

        obj.window_titlebar = js_traits<std::optional<std::shared_ptr<mb_shell::js::window_titlebar_controller>>>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "window_titlebar"));

        obj.input_box = js_traits<std::optional<std::shared_ptr<mb_shell::js::input_box_controller>>>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "input_box"));

        obj.window_info = js_traits<mb_shell::js::caller_window_data>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "window_info"));

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::js_menu_context &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        JS_SetPropertyStr(ctx, obj, "folder_view", js_traits<std::optional<std::shared_ptr<mb_shell::js::folder_view_controller>>>::wrap(ctx, val.folder_view));

        JS_SetPropertyStr(ctx, obj, "window_titlebar", js_traits<std::optional<std::shared_ptr<mb_shell::js::window_titlebar_controller>>>::wrap(ctx, val.window_titlebar));

        JS_SetPropertyStr(ctx, obj, "input_box", js_traits<std::optional<std::shared_ptr<mb_shell::js::input_box_controller>>>::wrap(ctx, val.input_box));

        JS_SetPropertyStr(ctx, obj, "window_info", js_traits<mb_shell::js::caller_window_data>::wrap(ctx, val.window_info));

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::js_menu_context> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::js_menu_context>("js_menu_context")
            .constructor<>()
                .fun<&mb_shell::js::js_menu_context::folder_view>("folder_view")
                .fun<&mb_shell::js::js_menu_context::window_titlebar>("window_titlebar")
                .fun<&mb_shell::js::js_menu_context::input_box>("input_box")
                .fun<&mb_shell::js::js_menu_context::window_info>("window_info")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::screenside_button_controller> {
    static mb_shell::js::screenside_button_controller unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::screenside_button_controller obj;

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::screenside_button_controller &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::screenside_button_controller> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::screenside_button_controller>("screenside_button_controller")
            .constructor<>()
                .fun<&mb_shell::js::screenside_button_controller::add_button>("add_button")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::menu_info_basic_js> {
    static mb_shell::js::menu_info_basic_js unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::menu_info_basic_js obj;

        obj.menu = js_traits<std::shared_ptr<mb_shell::js::menu_controller>>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "menu"));

        obj.context = js_traits<std::shared_ptr<mb_shell::js::js_menu_context>>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "context"));

        obj.screenside_button = js_traits<std::shared_ptr<mb_shell::js::screenside_button_controller>>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "screenside_button"));

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::menu_info_basic_js &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        JS_SetPropertyStr(ctx, obj, "menu", js_traits<std::shared_ptr<mb_shell::js::menu_controller>>::wrap(ctx, val.menu));

        JS_SetPropertyStr(ctx, obj, "context", js_traits<std::shared_ptr<mb_shell::js::js_menu_context>>::wrap(ctx, val.context));

        JS_SetPropertyStr(ctx, obj, "screenside_button", js_traits<std::shared_ptr<mb_shell::js::screenside_button_controller>>::wrap(ctx, val.screenside_button));

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::menu_info_basic_js> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::menu_info_basic_js>("menu_info_basic_js")
            .constructor<>()
                .fun<&mb_shell::js::menu_info_basic_js::menu>("menu")
                .fun<&mb_shell::js::menu_info_basic_js::context>("context")
                .fun<&mb_shell::js::menu_info_basic_js::screenside_button>("screenside_button")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::menu_controller> {
    static mb_shell::js::menu_controller unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::menu_controller obj;

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::menu_controller &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::menu_controller> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::menu_controller>("menu_controller")
            .constructor<>()
                .property<&mb_shell::js::menu_controller::get_widget>("widget")
                .property<&mb_shell::js::menu_controller::get_items>("items")
                .fun<&mb_shell::js::menu_controller::get_widget>("get_widget")
                .fun<&mb_shell::js::menu_controller::valid>("valid")
                .fun<&mb_shell::js::menu_controller::append_item_after>("append_item_after")
                .fun<&mb_shell::js::menu_controller::append_widget_after>("append_widget_after")
                .fun<&mb_shell::js::menu_controller::append_parent_item_after>("append_parent_item_after")
                .fun<&mb_shell::js::menu_controller::append_parent_item>("append_parent_item")
                .fun<&mb_shell::js::menu_controller::prepend_parent_item>("prepend_parent_item")
                .fun<&mb_shell::js::menu_controller::append_item>("append_item")
                .fun<&mb_shell::js::menu_controller::prepend_item>("prepend_item")
                .fun<&mb_shell::js::menu_controller::prepend_spacer>("prepend_spacer")
                .fun<&mb_shell::js::menu_controller::append_spacer>("append_spacer")
                .fun<&mb_shell::js::menu_controller::close>("close")
                .fun<&mb_shell::js::menu_controller::clear>("clear")
                .fun<&mb_shell::js::menu_controller::get_items>("get_items")
                .fun<&mb_shell::js::menu_controller::get_item>("get_item")
                .static_fun<&mb_shell::js::menu_controller::add_menu_listener>("add_menu_listener")
                .fun<&mb_shell::js::menu_controller::prepend_menu>("prepend_menu")
                .fun<&mb_shell::js::menu_controller::append_menu>("append_menu")
                .fun<&mb_shell::js::menu_controller::append_menu_after>("append_menu_after")
                .static_fun<&mb_shell::js::menu_controller::create_detached>("create_detached")
                .fun<&mb_shell::js::menu_controller::show_at>("show_at")
                .fun<&mb_shell::js::menu_controller::show_at_cursor>("show_at_cursor")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::clipboard> {
    static mb_shell::js::clipboard unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::clipboard obj;

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::clipboard &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::clipboard> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::clipboard>("clipboard")
            .constructor<>()
                .static_fun<&mb_shell::js::clipboard::get_text>("get_text")
                .static_fun<&mb_shell::js::clipboard::set_text>("set_text")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::network> {
    static mb_shell::js::network unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::network obj;

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::network &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::network> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::network>("network")
            .constructor<>()
                .static_fun<&mb_shell::js::network::get>("get")
                .static_fun<&mb_shell::js::network::post>("post")
                .static_fun<&mb_shell::js::network::get_async>("get_async")
                .static_fun<&mb_shell::js::network::post_async>("post_async")
                .static_fun<&mb_shell::js::network::download_async>("download_async")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::subproc_result_data> {
    static mb_shell::js::subproc_result_data unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::subproc_result_data obj;

        obj.out = js_traits<std::string>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "out"));

        obj.err = js_traits<std::string>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "err"));

        obj.code = js_traits<int>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "code"));

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::subproc_result_data &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        JS_SetPropertyStr(ctx, obj, "out", js_traits<std::string>::wrap(ctx, val.out));

        JS_SetPropertyStr(ctx, obj, "err", js_traits<std::string>::wrap(ctx, val.err));

        JS_SetPropertyStr(ctx, obj, "code", js_traits<int>::wrap(ctx, val.code));

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::subproc_result_data> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::subproc_result_data>("subproc_result_data")
            .constructor<>()
                .fun<&mb_shell::js::subproc_result_data::out>("out")
                .fun<&mb_shell::js::subproc_result_data::err>("err")
                .fun<&mb_shell::js::subproc_result_data::code>("code")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::subproc> {
    static mb_shell::js::subproc unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::subproc obj;

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::subproc &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::subproc> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::subproc>("subproc")
            .constructor<>()
                .static_fun<&mb_shell::js::subproc::run>("run")
                .static_fun<&mb_shell::js::subproc::run_async>("run_async")
                .static_fun<&mb_shell::js::subproc::open>("open")
                .static_fun<&mb_shell::js::subproc::open_async>("open_async")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::fs> {
    static mb_shell::js::fs unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::fs obj;

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::fs &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::fs> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::fs>("fs")
            .constructor<>()
                .static_fun<&mb_shell::js::fs::cwd>("cwd")
                .static_fun<&mb_shell::js::fs::chdir>("chdir")
                .static_fun<&mb_shell::js::fs::exists>("exists")
                .static_fun<&mb_shell::js::fs::isdir>("isdir")
                .static_fun<&mb_shell::js::fs::mkdir>("mkdir")
                .static_fun<&mb_shell::js::fs::rmdir>("rmdir")
                .static_fun<&mb_shell::js::fs::rename>("rename")
                .static_fun<&mb_shell::js::fs::remove>("remove")
                .static_fun<&mb_shell::js::fs::copy>("copy")
                .static_fun<&mb_shell::js::fs::move>("move")
                .static_fun<&mb_shell::js::fs::read>("read")
                .static_fun<&mb_shell::js::fs::write>("write")
                .static_fun<&mb_shell::js::fs::read_binary>("read_binary")
                .static_fun<&mb_shell::js::fs::write_binary>("write_binary")
                .static_fun<&mb_shell::js::fs::readdir>("readdir")
                .static_fun<&mb_shell::js::fs::copy_shfile>("copy_shfile")
                .static_fun<&mb_shell::js::fs::move_shfile>("move_shfile")
                .static_fun<&mb_shell::js::fs::watch>("watch")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::breeze> {
    static mb_shell::js::breeze unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::breeze obj;

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::breeze &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::breeze> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::breeze>("breeze")
            .constructor<>()
                .static_fun<&mb_shell::js::breeze::version>("version")
                .static_fun<&mb_shell::js::breeze::hash>("hash")
                .static_fun<&mb_shell::js::breeze::branch>("branch")
                .static_fun<&mb_shell::js::breeze::build_date>("build_date")
                .static_fun<&mb_shell::js::breeze::data_directory>("data_directory")
                .static_fun<&mb_shell::js::breeze::is_light_theme>("is_light_theme")
                .static_fun<&mb_shell::js::breeze::user_language>("user_language")
                .static_fun<&mb_shell::js::breeze::set_can_reload_js>("set_can_reload_js")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::win32> {
    static mb_shell::js::win32 unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::win32 obj;

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::win32 &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::win32> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::win32>("win32")
            .constructor<>()
                .static_fun<&mb_shell::js::win32::resid_from_string>("resid_from_string")
                .static_fun<&mb_shell::js::win32::string_from_resid>("string_from_resid")
                .static_fun<&mb_shell::js::win32::all_resids_from_string>("all_resids_from_string")
                .static_fun<&mb_shell::js::win32::load_library>("load_library")
                .static_fun<&mb_shell::js::win32::env>("env")
                .static_fun<&mb_shell::js::win32::load_file_icon>("load_file_icon")
                .static_fun<&mb_shell::js::win32::reg_get_dword>("reg_get_dword")
                .static_fun<&mb_shell::js::win32::reg_get_string>("reg_get_string")
                .static_fun<&mb_shell::js::win32::reg_get_qword>("reg_get_qword")
                .static_fun<&mb_shell::js::win32::reg_set_dword>("reg_set_dword")
                .static_fun<&mb_shell::js::win32::reg_set_string>("reg_set_string")
                .static_fun<&mb_shell::js::win32::reg_set_qword>("reg_set_qword")
                .static_fun<&mb_shell::js::win32::is_key_down>("is_key_down")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::notification> {
    static mb_shell::js::notification unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::notification obj;

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::notification &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::notification> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::notification>("notification")
            .constructor<>()
                .static_fun<&mb_shell::js::notification::send_basic>("send_basic")
                .static_fun<&mb_shell::js::notification::send_with_image>("send_with_image")
                .static_fun<&mb_shell::js::notification::send_title_text>("send_title_text")
                .static_fun<&mb_shell::js::notification::send_with_buttons>("send_with_buttons")
            ;
    }
};

template <> struct qjs::js_traits<mb_shell::js::infra> {
    static mb_shell::js::infra unwrap(JSContext *ctx, JSValueConst v) {
        mb_shell::js::infra obj;

        return obj;
    }

    static JSValue wrap(JSContext *ctx, const mb_shell::js::infra &val) noexcept {
        JSValue obj = JS_NewObject(ctx);

        return obj;
    }
};
template<> struct js_bind<mb_shell::js::infra> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<mb_shell::js::infra>("infra")
            .constructor<>()
                .static_fun<&mb_shell::js::infra::setTimeout>("setTimeout")
                .static_fun<&mb_shell::js::infra::clearTimeout>("clearTimeout")
                .static_fun<&mb_shell::js::infra::setInterval>("setInterval")
                .static_fun<&mb_shell::js::infra::clearInterval>("clearInterval")
                .static_fun<&mb_shell::js::infra::atob>("atob")
                .static_fun<&mb_shell::js::infra::btoa>("btoa")
            ;
    }
};

inline void bindAll(qjs::Context::Module &mod) {

    js_bind<mb_shell::js::breeze_ui>::bind(mod);

    js_bind<mb_shell::js::breeze_ui::js_widget>::bind(mod);

    js_bind<mb_shell::js::breeze_ui::js_text_widget>::bind(mod);

    js_bind<mb_shell::js::breeze_ui::js_flex_layout_widget>::bind(mod);

    js_bind<mb_shell::js::breeze_ui::js_image_widget>::bind(mod);

    js_bind<mb_shell::js::breeze_ui::js_spacer_widget>::bind(mod);

    js_bind<mb_shell::js::breeze_ui::widgets_factory>::bind(mod);

    js_bind<mb_shell::js::breeze_ui::breeze_paint>::bind(mod);

    js_bind<mb_shell::js::breeze_ui::window>::bind(mod);

    js_bind<mb_shell::js::folder_view_folder_item>::bind(mod);

    js_bind<mb_shell::js::folder_view_controller>::bind(mod);

    js_bind<mb_shell::js::value_reset>::bind(mod);

    js_bind<mb_shell::js::window_titlebar_controller>::bind(mod);

    js_bind<mb_shell::js::input_box_controller>::bind(mod);

    js_bind<mb_shell::js::js_menu_action_event_data>::bind(mod);

    js_bind<mb_shell::js::js_menu_data>::bind(mod);

    js_bind<mb_shell::js::menu_item_controller>::bind(mod);

    js_bind<mb_shell::js::menu_item_parent_item_controller>::bind(mod);

    js_bind<mb_shell::js::window_prop_data>::bind(mod);

    js_bind<mb_shell::js::caller_window_data>::bind(mod);

    js_bind<mb_shell::js::js_menu_context>::bind(mod);

    js_bind<mb_shell::js::screenside_button_controller>::bind(mod);

    js_bind<mb_shell::js::menu_info_basic_js>::bind(mod);

    js_bind<mb_shell::js::menu_controller>::bind(mod);

    js_bind<mb_shell::js::clipboard>::bind(mod);

    js_bind<mb_shell::js::network>::bind(mod);

    js_bind<mb_shell::js::subproc_result_data>::bind(mod);

    js_bind<mb_shell::js::subproc>::bind(mod);

    js_bind<mb_shell::js::fs>::bind(mod);

    js_bind<mb_shell::js::breeze>::bind(mod);

    js_bind<mb_shell::js::win32>::bind(mod);

    js_bind<mb_shell::js::notification>::bind(mod);

    js_bind<mb_shell::js::infra>::bind(mod);

}
